Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Unused terminals:

    NIL
    QUOTE
    FALSE
    TRUE

Grammar

Rule 0     S' -> ast
Rule 1     ast -> let simb simb num
Rule 2     ast -> let simb simb text
Rule 3     ast -> print lparen simb rparen
Rule 4     simb -> SIMB
Rule 5     num -> NUM
Rule 6     let -> LET
Rule 7     text -> TEXT
Rule 8     print -> PRINT
Rule 9     lparen -> LPAREN
Rule 10    rparen -> RPAREN

Terminals, with rules where they appear

FALSE                : 
LET                  : 6
LPAREN               : 9
NIL                  : 
NUM                  : 5
PRINT                : 8
QUOTE                : 
RPAREN               : 10
SIMB                 : 4
TEXT                 : 7
TRUE                 : 
error                : 

Nonterminals, with rules where they appear

ast                  : 0
let                  : 1 2
lparen               : 3
num                  : 1
print                : 3
rparen               : 3
simb                 : 1 1 2 2 3
text                 : 2

Parsing method: LALR

state 0

    (0) S' -> . ast
    (1) ast -> . let simb simb num
    (2) ast -> . let simb simb text
    (3) ast -> . print lparen simb rparen
    (6) let -> . LET
    (8) print -> . PRINT

    LET             shift and go to state 5
    PRINT           shift and go to state 2

    ast                            shift and go to state 1
    let                            shift and go to state 3
    print                          shift and go to state 4

state 1

    (0) S' -> ast .



state 2

    (8) print -> PRINT .

    LPAREN          reduce using rule 8 (print -> PRINT .)


state 3

    (1) ast -> let . simb simb num
    (2) ast -> let . simb simb text
    (4) simb -> . SIMB

    SIMB            shift and go to state 7

    simb                           shift and go to state 6

state 4

    (3) ast -> print . lparen simb rparen
    (9) lparen -> . LPAREN

    LPAREN          shift and go to state 8

    lparen                         shift and go to state 9

state 5

    (6) let -> LET .

    SIMB            reduce using rule 6 (let -> LET .)


state 6

    (1) ast -> let simb . simb num
    (2) ast -> let simb . simb text
    (4) simb -> . SIMB

    SIMB            shift and go to state 7

    simb                           shift and go to state 10

state 7

    (4) simb -> SIMB .

    NUM             reduce using rule 4 (simb -> SIMB .)
    TEXT            reduce using rule 4 (simb -> SIMB .)
    SIMB            reduce using rule 4 (simb -> SIMB .)
    RPAREN          reduce using rule 4 (simb -> SIMB .)


state 8

    (9) lparen -> LPAREN .

    SIMB            reduce using rule 9 (lparen -> LPAREN .)


state 9

    (3) ast -> print lparen . simb rparen
    (4) simb -> . SIMB

    SIMB            shift and go to state 7

    simb                           shift and go to state 11

state 10

    (1) ast -> let simb simb . num
    (2) ast -> let simb simb . text
    (5) num -> . NUM
    (7) text -> . TEXT

    NUM             shift and go to state 15
    TEXT            shift and go to state 12

    num                            shift and go to state 13
    text                           shift and go to state 14

state 11

    (3) ast -> print lparen simb . rparen
    (10) rparen -> . RPAREN

    RPAREN          shift and go to state 17

    rparen                         shift and go to state 16

state 12

    (7) text -> TEXT .

    $end            reduce using rule 7 (text -> TEXT .)


state 13

    (1) ast -> let simb simb num .

    $end            reduce using rule 1 (ast -> let simb simb num .)


state 14

    (2) ast -> let simb simb text .

    $end            reduce using rule 2 (ast -> let simb simb text .)


state 15

    (5) num -> NUM .

    $end            reduce using rule 5 (num -> NUM .)


state 16

    (3) ast -> print lparen simb rparen .

    $end            reduce using rule 3 (ast -> print lparen simb rparen .)


state 17

    (10) rparen -> RPAREN .

    $end            reduce using rule 10 (rparen -> RPAREN .)

