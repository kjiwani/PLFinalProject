Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Unused terminals:

    QUOTE
    LPAREN
    TRUE
    TEXT
    RPAREN
    NIL
    FALSE

Grammar

Rule 0     S' -> ast
Rule 1     ast -> let simb simb num
Rule 2     simb -> SIMB
Rule 3     num -> NUM
Rule 4     let -> LET

Terminals, with rules where they appear

FALSE                : 
LET                  : 4
LPAREN               : 
NIL                  : 
NUM                  : 3
QUOTE                : 
RPAREN               : 
SIMB                 : 2
TEXT                 : 
TRUE                 : 
error                : 

Nonterminals, with rules where they appear

ast                  : 0
let                  : 1
num                  : 1
simb                 : 1 1

Parsing method: LALR

state 0

    (0) S' -> . ast
    (1) ast -> . let simb simb num
    (4) let -> . LET

    LET             shift and go to state 3

    ast                            shift and go to state 1
    let                            shift and go to state 2

state 1

    (0) S' -> ast .



state 2

    (1) ast -> let . simb simb num
    (2) simb -> . SIMB

    SIMB            shift and go to state 4

    simb                           shift and go to state 5

state 3

    (4) let -> LET .

    SIMB            reduce using rule 4 (let -> LET .)


state 4

    (2) simb -> SIMB .

    SIMB            reduce using rule 2 (simb -> SIMB .)
    NUM             reduce using rule 2 (simb -> SIMB .)


state 5

    (1) ast -> let simb . simb num
    (2) simb -> . SIMB

    SIMB            shift and go to state 4

    simb                           shift and go to state 6

state 6

    (1) ast -> let simb simb . num
    (3) num -> . NUM

    NUM             shift and go to state 8

    num                            shift and go to state 7

state 7

    (1) ast -> let simb simb num .

    $end            reduce using rule 1 (ast -> let simb simb num .)


state 8

    (3) num -> NUM .

    $end            reduce using rule 3 (num -> NUM .)

